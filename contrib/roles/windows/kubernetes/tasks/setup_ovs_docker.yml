---
- name: OVS Docker network setup | Remove setup_ovs_docker script if exists
  win_file:
    path: C:\setup_ovs_docker.ps1
    state: absent

- name: OVS Docker network setup | Remove script output if exists
  win_file:
    path: C:\setup_ovs_docker_output.txt
    state: absent

- name: OVS Docker network setup | Get psexec
  win_get_url:
    url: https://download.sysinternals.com/files/PSTools.zip
    dest: "C:/PSTools.zip"
  retries: 10
  delay: 5

- name: OVS Docker network setup | Unzip psexec
  win_unzip:
    src: "C:/PSTools.zip"
    dest: "C:/PSTools"

- name: OVS Docker network setup | Create setup_ovs_docker script
  win_lineinfile:
    path: C:\setup_ovs_docker.ps1
    create: yes
    line: |
      # Get Admin rights in case the current powershell doesnt have admin rights
      if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) { Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs; exit }
      $RegROPath = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
      Remove-ItemProperty $RegROPath "OVN_Init_Node" -ErrorAction SilentlyContinue
      #TODO figure why they don't get automatically included
      Import-Module "C:\Windows\System32\WindowsPowerShell\v1.0\Modules\HostNetworkingService\HostNetworkingService.psm1"
      Import-Module "C:\Windows\System32\WindowsPowerShell\v1.0\Modules\OVS\OVS.psm1"
      Import-Module "C:\Windows\System32\WindowsPowerShell\v1.0\Modules\HNSHelper\HNSHelper.psm1"

      # # There should be only one transparent network
      $HNS_NW = Get-HNSNetwork | where {$_.type -eq "transparent"}
      $HNS_ID = $HNS_NW.Id
      sc.exe config ovs-vswitchd start= disabled
      Stop-Service ovs-vswitchd -Force
      Disable-OVSOnHNSNetwork $HNS_ID
      ovs-vsctl --if-exists --no-wait del-br br-ex
      ovs-vsctl --no-wait --may-exist add-br br-ex
      ovs-vsctl --no-wait add-port br-ex "vEthernet ({{phys_interface_name}})" -- set interface  "vEthernet ({{phys_interface_name}})" type=internal
      ovs-vsctl --no-wait add-port br-ex '{{phys_interface_name}}'
      Stop-Service ovs-vswitchd
      Enable-OVSOnHNSNetwork $HNS_ID

      sc.exe config ovs-vswitchd start= auto
      Start-Service ovs-vswitchd
      sleep 2
      Restart-Service ovs-vswitchd
      $GUID = (New-Guid).Guid
      ovs-vsctl set Open_vSwitch . external_ids:system-id="$($GUID)"
      ovs-vsctl set Open_vSwitch . external_ids:k8s-api-server="http://{{ kubernetes_info.MASTER_IP }}:8080"
      ovs-vsctl set Open_vSwitch . external_ids:ovn-remote="tcp:{{ kubernetes_info.MASTER_IP }}:6642" external_ids:ovn-nb="tcp:{{ kubernetes_info.MASTER_IP }}:6641" external_ids:ovn-encap-ip={{ host_public_ip }} external_ids:ovn-encap-type="geneve"
    newline: unix

- name: OVS Docker network setup | Run setup_ovs_docker script
  win_psexec:
    executable: C:\PSTools\psexec.exe
    command: cmd /c powershell.exe C:\setup_ovs_docker.ps1 2>&1 >> C:\setup_ovs_docker_output.txt
    username: "{{ host_info.username }}"
    password: "{{ host_info.password }}"
    timeout: 120

- name: OVS Docker network setup | Delete psexec
  win_file:
    path: "{{item}}"
    state: absent
  with_items:
    - "C:/PSTools.zip"
    - "C:/PSTools"
